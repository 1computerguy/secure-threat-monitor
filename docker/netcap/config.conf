# NETCAP config for capture tool
# Generated by NETCAP v0.5.9
# You can regenerate an up to date default configuration with:
# 	$ net <tool> -gen-config > net.<tool>.conf

# support streams without SYN/SYN+ACK/ACK sequence
allowmissinginit true

# select base layer
base ethernet

# supply a BPF filter to use prior to processing packets with netcap
#bpf 

# size of the stored service banners in bytes
bsize 256

# buffer data in memory before writing to disk
buf true

# check TCP checksum
checksum false

# reassembly: close connections that are inactive
close-inactive-timeout 24h0m0s

# reassembly: close connections that have pending bytes
close-pending-timeout 24h0m0s

# compress output with gzip
comp false

# block size used for parallel compression
compression-block-size 1048576

# level of compression
compression-level max-speed

# read configuration from file at path
#config 

# flush connections every X flows
conn-flush-interval 1000

# close connections older than X seconds
conn-timeout 24h0m0s

# save raw TCP connections
conns true

# add packet flow context to selected audit records
context true

# create cpu profile
cpuprof false

# output data as CSV
csv false

# display debug information
debug false

# show all available decoders
decoders false

# disable the generic software harvester regex
disable-generic-software-harvester true

# use DPI for device profiling
dpi false

# write data to elastic db
elastic false

# elastic db endpoints to write data to
#elastic-addrs 

# elastic bulk size for custom audit records
#elastic-bulk-custom 1000

# elastic bulk size for gopacket audit records
#elastic-bulk-gopacket 2000

# elastic db password
#elastic-pass 

# elastic db username
#elastic-user 

# enable entropy calculation for Eth,IP,TCP and UDP payloads
entropy false

# exclude specific decoders
exclude ARP,Credentials,DeviceProfile,Ethernet,Exploit,IPProfile,Mail,Software,UDP,Vulnerability

# path to extracted files
fileStorage files

# flushes flows every X flows
flow-flush-interval 1000

# closes flows older than flowTimeout
flow-timeout 24h0m0s

# flush assembler every N packets
flushevery 100

# free OS memory every X minutes, disabled if set to 0
free-os-mem 0

# generate elastic indices and mapping
gen-elastic-indices false

# use geolocation for device profiling
geoDB false

# size of the data passed to the credential harvesters in bytes
hbsize 256

# dump packets used in stream reassembly as hex to the reassembly.log file
hexdump false

# create local endpoint to trigger teardown via HTTP
http-shutdown false

# attach to network interface and capture in live mode
iface ens224

# ignore errors from initializing custom decoders
ignore-init-errors true

# disable writing unknown packets into a pcap file
ignore-unknown true

# ignore TCP FSM errors
ignorefsmerr true

# include specific decoders
include IPv4,TCP,TLSClientHello,TLSServerHello,Service

# list all visible network interfaces
interfaces false

# Defragment IPv4 packets
ip4defrag true

# use ja3 database for device profiling
ja3DB true

# output data as JSON
json true

# kibana endpoint URL
#kibana 

# resolve DNS locally via hosts file in the database dir
local-dns false

# enable verbose packet decoding error logging
log-errors false

# use mac to vendor database for device profiling
macDB true

# set size for membuf
membuf-size 12582912

# create memory profile
memprof false

# write memory profile
#memprofile 

# serve metrics at
metrics 0.0.0.0:7777

# do not check TCP options (useful to ignore MSS on captures with TSO)
nooptcheck true

# don't prompt for interaction during execution
noprompt false

# write no data to disk
null false

# select decoding options
opts lazy

# specify output directory, will be created if it does not exist
out /capture/netcap

# print a list of all available decoders and fields
overview false

# capture payload for supported layers
payload false

# set packet buffer size, for channels that feed data to workers
pbuf 1000

# force printing progress to stderr even in quiet mode
progress false

# toggle promiscuous mode for live capture
promisc true

# output data as protobuf
proto false

# don't print infos to stdout
quiet false

# if true uses the default golang re2 regex engine for service detection
re2 true

# possibility of passing a custom regex for harvesting credentials
#reCustom 

# read specified file, can either be a pcap or netcap audit record file
#read 

# reassemble TCP connections
reassemble-connections true

# if true, the reassembly will log verbose debugging information
reassembly-debug false

# remove tcp streams that receive a FIN or RST packet from the stream pool
remove-closed-streams false

# resolve ips to domains via the operating systems default dns resolver
reverse-dns true

# size for channel used to pass data to the stream decoders. default is unbuffered
sbuf-size 1000

# use serviceDB for device profiling
serviceDB false

# configure snaplen for live capture from interface
snaplen 1514

# stop processing the conversation after the first credential harvester returned a result
stop-after-harvester-match true

# stop processing the conversation after the first service probe returned a result
stop-after-service-category-miss true

# stop processing the conversation after the first service probe returned a result
stop-after-service-match true

# stream buffer size for tcp stream processor
stream-buffer 1000

# add debug output for TCP connections to debug.log
tcp-debug false

# print processing time even in quiet mode
time false

# set the timeout for live capture, providing a value of zero will be substituted with pcap.BlockForever.
timeout 1s

# print netcap package version and exit
version false

# wait for all connections to finish processing before cleanup
wait-conns false

# number of workers
workers 4

# write incomplete response
writeincomplete true

